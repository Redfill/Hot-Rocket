package arm.node;

@:keep class Rocket extends armory.logicnode.LogicTree {

	public function new() { super(); name = "Rocket"; notifyOnAdd(add); }

	override public function add() {
		var _SetLocation_001 = new armory.logicnode.SetLocationNode(this);
		var _OnUpdate_001 = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate_001.addOutputs([_SetLocation_001]);
		_SetLocation_001.addInput(_OnUpdate_001, 0);
		_SetLocation_001.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		var _Vector_003 = new armory.logicnode.VectorNode(this);
		var _SeparateXYZ_003 = new armory.logicnode.SeparateVectorNode(this);
		var _GetLocation_002 = new armory.logicnode.GetLocationNode(this);
		_GetLocation_002.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetLocation_002.addOutputs([_SeparateXYZ_003]);
		_SeparateXYZ_003.addInput(_GetLocation_002, 0);
		_SeparateXYZ_003.addOutputs([_Vector_003]);
		_SeparateXYZ_003.addOutputs([_Vector_003]);
		_SeparateXYZ_003.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Vector_003.addInput(_SeparateXYZ_003, 0);
		_Vector_003.addInput(_SeparateXYZ_003, 1);
		_Vector_003.addInput(new armory.logicnode.FloatNode(this, 1.0), 0);
		_Vector_003.addOutputs([_SetLocation_001]);
		_SetLocation_001.addInput(_Vector_003, 0);
		_SetLocation_001.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetLocation = new armory.logicnode.SetLocationNode(this);
		var _OnUpdate = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate.addOutputs([_SetLocation]);
		_SetLocation.addInput(_OnUpdate, 0);
		var _Object = new armory.logicnode.ObjectNode(this);
		_Object.addInput(new armory.logicnode.ObjectNode(this, "Camera"), 0);
		var _GetLocation_001 = new armory.logicnode.GetLocationNode(this);
		_GetLocation_001.addInput(_Object, 0);
		var _SeparateXYZ_001 = new armory.logicnode.SeparateVectorNode(this);
		_SeparateXYZ_001.addInput(_GetLocation_001, 0);
		_SeparateXYZ_001.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_SeparateXYZ_001.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		var _Vector_001 = new armory.logicnode.VectorNode(this);
		var _SeparateXYZ = new armory.logicnode.SeparateVectorNode(this);
		var _GetLocation = new armory.logicnode.GetLocationNode(this);
		_GetLocation.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetLocation.addOutputs([_SeparateXYZ]);
		_SeparateXYZ.addInput(_GetLocation, 0);
		_SeparateXYZ.addOutputs([_Vector_001]);
		_SeparateXYZ.addOutputs([_Vector_001]);
		_SeparateXYZ.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Vector_001.addInput(_SeparateXYZ, 0);
		_Vector_001.addInput(_SeparateXYZ, 1);
		_Vector_001.addInput(_SeparateXYZ_001, 2);
		_Vector_001.addOutputs([_SetLocation]);
		_SeparateXYZ_001.addOutputs([_Vector_001]);
		_GetLocation_001.addOutputs([_SeparateXYZ_001]);
		_Object.addOutputs([_GetLocation_001, _SetLocation]);
		_SetLocation.addInput(_Object, 0);
		_SetLocation.addInput(_Vector_001, 0);
		_SetLocation.addOutputs([new armory.logicnode.NullNode(this)]);
		var _Print_001 = new armory.logicnode.PrintNode(this);
		var _SetScene = new armory.logicnode.SetSceneNode(this);
		var _OnKeyboard = new armory.logicnode.OnKeyboardNode(this);
		_OnKeyboard.property0 = "Started";
		_OnKeyboard.property1 = "r";
		_OnKeyboard.addOutputs([_SetScene]);
		_SetScene.addInput(_OnKeyboard, 0);
		var _Scene = new armory.logicnode.SceneNode(this);
		_Scene.property0 = "Scene";
		_Scene.addOutputs([_SetScene]);
		_SetScene.addInput(_Scene, 0);
		_SetScene.addOutputs([_Print_001]);
		_SetScene.addOutputs([new armory.logicnode.ObjectNode(this, "")]);
		_Print_001.addInput(_SetScene, 0);
		var _String = new armory.logicnode.StringNode(this);
		_String.addInput(new armory.logicnode.StringNode(this, "reset"), 0);
		_String.addOutputs([_Print_001]);
		_Print_001.addInput(_String, 0);
		_Print_001.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetRotation = new armory.logicnode.SetRotationNode(this);
		var _OnUpdate_003 = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate_003.addOutputs([_SetRotation]);
		_SetRotation.addInput(_OnUpdate_003, 0);
		_SetRotation.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		var _Vector_002 = new armory.logicnode.VectorNode(this);
		_Vector_002.addInput(new armory.logicnode.FloatNode(this, 1.5707999467849731), 0);
		_Vector_002.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		var _Math_017 = new armory.logicnode.MathNode(this);
		_Math_017.property0 = "Arctan2";
		_Math_017.property1 = "false";
		var _Math_002 = new armory.logicnode.MathNode(this);
		_Math_002.property0 = "Subtract";
		_Math_002.property1 = "false";
		var _Math_001 = new armory.logicnode.MathNode(this);
		_Math_001.property0 = "Add";
		_Math_001.property1 = "false";
		var _Math = new armory.logicnode.MathNode(this);
		_Math.property0 = "Multiply";
		_Math.property1 = "false";
		var _SeparateXYZ_002 = new armory.logicnode.SeparateVectorNode(this);
		var _MouseCoords = new armory.logicnode.MouseCoordsNode(this);
		_MouseCoords.addOutputs([_SeparateXYZ_002]);
		_MouseCoords.addOutputs([new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0)]);
		_MouseCoords.addOutputs([new armory.logicnode.IntegerNode(this, 0)]);
		_SeparateXYZ_002.addInput(_MouseCoords, 0);
		var _Math_005 = new armory.logicnode.MathNode(this);
		_Math_005.property0 = "Subtract";
		_Math_005.property1 = "false";
		_Math_005.addInput(_SeparateXYZ_002, 0);
		var _Math_004 = new armory.logicnode.MathNode(this);
		_Math_004.property0 = "Multiply";
		_Math_004.property1 = "false";
		var _WindowInfo = new armory.logicnode.WindowInfoNode(this);
		_WindowInfo.addOutputs([_Math_004]);
		var _Math_003 = new armory.logicnode.MathNode(this);
		_Math_003.property0 = "Multiply";
		_Math_003.property1 = "false";
		_Math_003.addInput(_WindowInfo, 1);
		_Math_003.addInput(new armory.logicnode.FloatNode(this, 0.5), 0);
		_Math_003.addOutputs([_Math_002]);
		_WindowInfo.addOutputs([_Math_001, _Math_003]);
		_Math_004.addInput(_WindowInfo, 0);
		_Math_004.addInput(new armory.logicnode.FloatNode(this, 0.5), 0);
		_Math_004.addOutputs([_Math_005]);
		_Math_005.addInput(_Math_004, 0);
		_Math_005.addOutputs([_Math_017]);
		_SeparateXYZ_002.addOutputs([_Math_005]);
		_SeparateXYZ_002.addOutputs([_Math]);
		_SeparateXYZ_002.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Math.addInput(_SeparateXYZ_002, 1);
		_Math.addInput(new armory.logicnode.FloatNode(this, -1.0), 0);
		_Math.addOutputs([_Math_001]);
		_Math_001.addInput(_Math, 0);
		_Math_001.addInput(_WindowInfo, 1);
		_Math_001.addOutputs([_Math_002]);
		_Math_002.addInput(_Math_001, 0);
		_Math_002.addInput(_Math_003, 0);
		_Math_002.addOutputs([_Math_017]);
		_Math_017.addInput(_Math_002, 0);
		_Math_017.addInput(_Math_005, 0);
		_Math_017.addOutputs([_Vector_002]);
		_Vector_002.addInput(_Math_017, 0);
		_Vector_002.addOutputs([_SetRotation]);
		_SetRotation.addInput(_Vector_002, 0);
		_SetRotation.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetLightStrength_001 = new armory.logicnode.SetLightStrengthNode(this);
		var _SetTimeScale_001 = new armory.logicnode.SetTimeScaleNode(this);
		var _IsFalse = new armory.logicnode.IsFalseNode(this);
		var _OnUpdate_002 = new armory.logicnode.OnUpdateNode(this);
		var _IsTrue = new armory.logicnode.IsTrueNode(this);
		_IsTrue.addInput(_OnUpdate_002, 0);
		var _MouseState = new armory.logicnode.MouseNode(this);
		_MouseState.property0 = "Down";
		_MouseState.property1 = "left";
		_MouseState.addOutputs([_IsTrue, _IsFalse]);
		_IsTrue.addInput(_MouseState, 0);
		var _SetTimeScale = new armory.logicnode.SetTimeScaleNode(this);
		_SetTimeScale.addInput(_IsTrue, 0);
		_SetTimeScale.addInput(new armory.logicnode.FloatNode(this, 1.0), 0);
		var _ApplyForce = new armory.logicnode.ApplyForceNode(this);
		_ApplyForce.addInput(_SetTimeScale, 0);
		_ApplyForce.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		var _VectorMath_001 = new armory.logicnode.VectorMathNode(this);
		_VectorMath_001.property0 = "Multiply";
		var _VectorMath = new armory.logicnode.VectorMathNode(this);
		_VectorMath.property0 = "Multiply";
		var _VectorFromTransform = new armory.logicnode.VectorFromTransformNode(this);
		_VectorFromTransform.property0 = "Up";
		var _GetTransform = new armory.logicnode.GetTransformNode(this);
		_GetTransform.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetTransform.addOutputs([_VectorFromTransform]);
		_VectorFromTransform.addInput(_GetTransform, 0);
		_VectorFromTransform.addOutputs([_VectorMath]);
		_VectorMath.addInput(_VectorFromTransform, 0);
		_VectorMath.addInput(new armory.logicnode.VectorNode(this, 4.0, 4.0, 0.0), 0);
		_VectorMath.addOutputs([_VectorMath_001]);
		_VectorMath.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_VectorMath_001.addInput(_VectorMath, 0);
		var _Vector = new armory.logicnode.VectorNode(this);
		var _ReadStorage_001 = new armory.logicnode.ReadStorageNode(this);
		_ReadStorage_001.addInput(new armory.logicnode.StringNode(this, "speed"), 0);
		_ReadStorage_001.addInput(new armory.logicnode.StringNode(this, "1"), 0);
		_ReadStorage_001.addOutputs([_Vector, _Vector]);
		_Vector.addInput(_ReadStorage_001, 0);
		_Vector.addInput(_ReadStorage_001, 0);
		_Vector.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_Vector.addOutputs([_VectorMath_001]);
		_VectorMath_001.addInput(_Vector, 0);
		_VectorMath_001.addOutputs([_ApplyForce]);
		_VectorMath_001.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_ApplyForce.addInput(_VectorMath_001, 0);
		var _SetLightStrength = new armory.logicnode.SetLightStrengthNode(this);
		_SetLightStrength.addInput(_ApplyForce, 0);
		var _GetChild_001 = new armory.logicnode.GetChildNode(this);
		_GetChild_001.property0 = "Starts With";
		_GetChild_001.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetChild_001.addInput(new armory.logicnode.StringNode(this, "pro"), 0);
		_GetChild_001.addOutputs([_SetLightStrength, _SetLightStrength_001]);
		_SetLightStrength.addInput(_GetChild_001, 0);
		_SetLightStrength.addInput(new armory.logicnode.FloatNode(this, 300.0), 0);
		_SetLightStrength.addOutputs([new armory.logicnode.NullNode(this)]);
		_ApplyForce.addOutputs([_SetLightStrength]);
		_SetTimeScale.addOutputs([_ApplyForce]);
		_IsTrue.addOutputs([_SetTimeScale]);
		_OnUpdate_002.addOutputs([_IsTrue, _IsFalse]);
		_IsFalse.addInput(_OnUpdate_002, 0);
		_IsFalse.addInput(_MouseState, 0);
		_IsFalse.addOutputs([_SetTimeScale_001]);
		_SetTimeScale_001.addInput(_IsFalse, 0);
		_SetTimeScale_001.addInput(new armory.logicnode.FloatNode(this, 0.20000000298023224), 0);
		_SetTimeScale_001.addOutputs([_SetLightStrength_001]);
		_SetLightStrength_001.addInput(_SetTimeScale_001, 0);
		_SetLightStrength_001.addInput(_GetChild_001, 0);
		_SetLightStrength_001.addInput(new armory.logicnode.FloatNode(this, 0.0), 0);
		_SetLightStrength_001.addOutputs([new armory.logicnode.NullNode(this)]);
		var _WriteStorage = new armory.logicnode.WriteStorageNode(this);
		var _IsNotNone = new armory.logicnode.IsNotNoneNode(this);
		var _OnUpdate_004 = new armory.logicnode.OnUpdateNode(this);
		var _IsNone = new armory.logicnode.IsNoneNode(this);
		_IsNone.addInput(_OnUpdate_004, 0);
		var _CastPhysicsRay = new armory.logicnode.CastPhysicsRayNode(this);
		var _GetLocation_003 = new armory.logicnode.GetLocationNode(this);
		_GetLocation_003.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		var _SeparateXYZ_005 = new armory.logicnode.SeparateVectorNode(this);
		_SeparateXYZ_005.addInput(_GetLocation_003, 0);
		var _Math_006 = new armory.logicnode.MathNode(this);
		_Math_006.property0 = "Subtract";
		_Math_006.property1 = "false";
		_Math_006.addInput(_SeparateXYZ_005, 0);
		var _SeparateXYZ_004 = new armory.logicnode.SeparateVectorNode(this);
		_SeparateXYZ_004.addInput(_CastPhysicsRay, 1);
		_SeparateXYZ_004.addOutputs([_Math_006]);
		var _Math_008 = new armory.logicnode.MathNode(this);
		_Math_008.property0 = "Subtract";
		_Math_008.property1 = "false";
		_Math_008.addInput(_SeparateXYZ_005, 1);
		_Math_008.addInput(_SeparateXYZ_004, 1);
		var _Math_009 = new armory.logicnode.MathNode(this);
		_Math_009.property0 = "Power";
		_Math_009.property1 = "false";
		_Math_009.addInput(_Math_008, 0);
		_Math_009.addInput(new armory.logicnode.FloatNode(this, 2.0), 0);
		var _Math_010 = new armory.logicnode.MathNode(this);
		_Math_010.property0 = "Add";
		_Math_010.property1 = "false";
		var _Math_007 = new armory.logicnode.MathNode(this);
		_Math_007.property0 = "Power";
		_Math_007.property1 = "false";
		_Math_007.addInput(_Math_006, 0);
		_Math_007.addInput(new armory.logicnode.FloatNode(this, 2.0), 0);
		_Math_007.addOutputs([_Math_010]);
		_Math_010.addInput(_Math_007, 0);
		_Math_010.addInput(_Math_009, 0);
		var _Math_011 = new armory.logicnode.MathNode(this);
		_Math_011.property0 = "Power";
		_Math_011.property1 = "false";
		_Math_011.addInput(_Math_010, 0);
		_Math_011.addInput(new armory.logicnode.FloatNode(this, 0.5), 0);
		_Math_011.addOutputs([_WriteStorage]);
		_Math_010.addOutputs([_Math_011]);
		_Math_009.addOutputs([_Math_010]);
		_Math_008.addOutputs([_Math_009]);
		_SeparateXYZ_004.addOutputs([_Math_008]);
		_SeparateXYZ_004.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_Math_006.addInput(_SeparateXYZ_004, 0);
		_Math_006.addOutputs([_Math_007]);
		_SeparateXYZ_005.addOutputs([_Math_006]);
		_SeparateXYZ_005.addOutputs([_Math_008]);
		_SeparateXYZ_005.addOutputs([new armory.logicnode.FloatNode(this, 0.0)]);
		_GetLocation_003.addOutputs([_CastPhysicsRay, _SeparateXYZ_005]);
		_CastPhysicsRay.addInput(_GetLocation_003, 0);
		var _GetLocation_004 = new armory.logicnode.GetLocationNode(this);
		var _GetChild = new armory.logicnode.GetChildNode(this);
		_GetChild.property0 = "Starts With";
		_GetChild.addInput(new armory.logicnode.ObjectNode(this, ""), 0);
		_GetChild.addInput(new armory.logicnode.StringNode(this, "to"), 0);
		_GetChild.addOutputs([_GetLocation_004]);
		_GetLocation_004.addInput(_GetChild, 0);
		_GetLocation_004.addOutputs([_CastPhysicsRay]);
		_CastPhysicsRay.addInput(_GetLocation_004, 0);
		_CastPhysicsRay.addOutputs([_IsNotNone, _IsNone]);
		_CastPhysicsRay.addOutputs([_SeparateXYZ_004]);
		_IsNone.addInput(_CastPhysicsRay, 0);
		var _WriteStorage_001 = new armory.logicnode.WriteStorageNode(this);
		_WriteStorage_001.addInput(_IsNone, 0);
		_WriteStorage_001.addInput(new armory.logicnode.StringNode(this, "dis"), 0);
		var _Float = new armory.logicnode.FloatNode(this);
		_Float.addInput(new armory.logicnode.FloatNode(this, 100.0), 0);
		_Float.addOutputs([_WriteStorage_001]);
		_WriteStorage_001.addInput(_Float, 0);
		_WriteStorage_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_IsNone.addOutputs([_WriteStorage_001]);
		_OnUpdate_004.addOutputs([_IsNotNone, _IsNone]);
		_IsNotNone.addInput(_OnUpdate_004, 0);
		_IsNotNone.addInput(_CastPhysicsRay, 0);
		_IsNotNone.addOutputs([_WriteStorage]);
		_WriteStorage.addInput(_IsNotNone, 0);
		_WriteStorage.addInput(new armory.logicnode.StringNode(this, "dis"), 0);
		_WriteStorage.addInput(_Math_011, 0);
		_WriteStorage.addOutputs([new armory.logicnode.NullNode(this)]);
		var _WriteStorage_003 = new armory.logicnode.WriteStorageNode(this);
		var _Gate = new armory.logicnode.GateNode(this);
		_Gate.property0 = "Less Equal";
		_Gate.property1 = 9.999999747378752e-05;
		var _OnUpdate_005 = new armory.logicnode.OnUpdateNode(this);
		_OnUpdate_005.addOutputs([_Gate]);
		_Gate.addInput(_OnUpdate_005, 0);
		var _ReadStorage = new armory.logicnode.ReadStorageNode(this);
		_ReadStorage.addInput(new armory.logicnode.StringNode(this, "dis"), 0);
		_ReadStorage.addInput(new armory.logicnode.StringNode(this, "100"), 0);
		var _Math_012 = new armory.logicnode.MathNode(this);
		_Math_012.property0 = "Subtract";
		_Math_012.property1 = "false";
		_Math_012.addInput(_ReadStorage, 0);
		_Math_012.addInput(new armory.logicnode.FloatNode(this, 2.0), 0);
		var _Math_013 = new armory.logicnode.MathNode(this);
		_Math_013.property0 = "Multiply";
		_Math_013.property1 = "false";
		_Math_013.addInput(_Math_012, 0);
		_Math_013.addInput(new armory.logicnode.FloatNode(this, -1.2000000476837158), 0);
		var _Math_014 = new armory.logicnode.MathNode(this);
		_Math_014.property0 = "Add";
		_Math_014.property1 = "false";
		_Math_014.addInput(_Math_013, 0);
		_Math_014.addInput(new armory.logicnode.FloatNode(this, 1.0), 0);
		var _WriteStorage_002 = new armory.logicnode.WriteStorageNode(this);
		_WriteStorage_002.addInput(_Gate, 0);
		_WriteStorage_002.addInput(new armory.logicnode.StringNode(this, "speed"), 0);
		_WriteStorage_002.addInput(_Math_014, 0);
		_WriteStorage_002.addOutputs([new armory.logicnode.NullNode(this)]);
		_Math_014.addOutputs([_WriteStorage_002]);
		_Math_013.addOutputs([_Math_014]);
		_Math_012.addOutputs([_Math_013]);
		_ReadStorage.addOutputs([_Gate, _Math_012]);
		_Gate.addInput(_ReadStorage, 0);
		var _Float_001 = new armory.logicnode.FloatNode(this);
		_Float_001.addInput(new armory.logicnode.FloatNode(this, 2.0), 0);
		_Float_001.addOutputs([_Gate]);
		_Gate.addInput(_Float_001, 0);
		_Gate.addOutputs([_WriteStorage_002]);
		_Gate.addOutputs([_WriteStorage_003]);
		_WriteStorage_003.addInput(_Gate, 1);
		_WriteStorage_003.addInput(new armory.logicnode.StringNode(this, "speed"), 0);
		var _Float_003 = new armory.logicnode.FloatNode(this);
		_Float_003.addInput(new armory.logicnode.FloatNode(this, 1.0), 0);
		_Float_003.addOutputs([_WriteStorage_003]);
		_WriteStorage_003.addInput(_Float_003, 0);
		_WriteStorage_003.addOutputs([new armory.logicnode.NullNode(this)]);
	}
}
